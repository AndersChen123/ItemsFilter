//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.CategoriesFilter
{
    using Northwind.NET.Sample;
    using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class EqualFilter { }
#else

	public class EqualFilter : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

		public EqualFilter()
		{
			try
			{
				System.Uri resourceUri = new Uri($"/{Workspace.CallingAssemblyShortName};component/SampleData/CategoriesFilter/CategoriesFilter.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private double _CountAttachedFilterControls = 0;

		public double CountAttachedFilterControls
		{
			get
			{
				return this._CountAttachedFilterControls;
			}

			set
			{
				if (this._CountAttachedFilterControls != value)
				{
					this._CountAttachedFilterControls = value;
					this.OnPropertyChanged(nameof(CountAttachedFilterControls));
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged(nameof(Name));
				}
			}
		}

		private bool _IsActive = false;

		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}

			set
			{
				if (this._IsActive != value)
				{
					this._IsActive = value;
					this.OnPropertyChanged(nameof(IsActive));
				}
			}
		}

		private readonly CategoryCollection availableValues = new();

		public CategoryCollection AvailableValues
		{
			get
			{
				return this.availableValues;
			}
		}

		private readonly CategoryCollection selectedValues = new();

		public CategoryCollection SelectedValues
		{
			get
			{
				return this.selectedValues;
			}
		}
	}

	public class Category : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged(nameof(Name));
				}
			}
		}

		private string description = string.Empty;

		public string Description
		{
			get
			{
				return this.description;
			}

			set
			{
				if (this.description != value)
				{
					this.description = value;
					this.OnPropertyChanged(nameof(Description));
				}
			}
		}

		private System.Windows.Media.ImageSource picture = null;

		public System.Windows.Media.ImageSource Picture
		{
			get
			{
				return this.picture;
			}

			set
			{
				if (this.picture != value)
				{
					this.picture = value;
					this.OnPropertyChanged(nameof(Picture));
				}
			}
		}
	}

	public class CategoryCollection : System.Collections.ObjectModel.ObservableCollection<Category>
	{ 
	}
#endif
}
