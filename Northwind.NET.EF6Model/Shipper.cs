//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.NET.EF6Model
{
    using System;
    using System.Collections.Generic;
    
    using System.ComponentModel;
    using System.Collections.ObjectModel;
        
    public partial class Shipper: INotifyPropertyChanged
    {
        public Shipper()
        {
            this.Orders = new ObservableCollection<Order>();
        }
    
        
    			private int _ID;
    			public int ID { 
    				get { return _ID;}
    				set { 
    					if (_ID!=value) {
    						_ID = value;
    						RaisePropertyChanged("ID");
    					}
    				}
               }
        
    			private string _Name;
    			public string Name { 
    				get { return _Name;}
    				set { 
    					if (_Name!=value) {
    						_Name = value;
    						RaisePropertyChanged("Name");
    					}
    				}
               }
        
    			private string _Phone;
    			public string Phone { 
    				get { return _Phone;}
    				set { 
    					if (_Phone!=value) {
    						_Phone = value;
    						RaisePropertyChanged("Phone");
    					}
    				}
               }
        
    			private byte[] _RowTimeStamp;
    			public byte[] RowTimeStamp { 
    				get { return _RowTimeStamp;}
    				set { 
    					if (_RowTimeStamp!=value) {
    						_RowTimeStamp = value;
    						RaisePropertyChanged("RowTimeStamp");
    					}
    				}
               }
    
        
    			private ObservableCollection<Order> _Orders;
    			public virtual ObservableCollection<Order> Orders { 
    				get { return _Orders;}
    				set { 
    					if (_Orders!=value) {
    						_Orders = value;
    						RaisePropertyChanged("Orders");
    					}
    				}
               }
    	public event PropertyChangedEventHandler PropertyChanged;
    	protected virtual void RaisePropertyChanged(string propertyName) {
            	var handler = PropertyChanged;
    			if (handler != null) {
    	            handler(this, new PropertyChangedEventArgs(propertyName));
    			}
        }
    }
}
