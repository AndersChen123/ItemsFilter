//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.NET.EF6Model
{
    using System;
    using System.Collections.Generic;
    
    using System.ComponentModel;
    using System.Collections.ObjectModel;
        
    public partial class Product: INotifyPropertyChanged
    {
        public Product()
        {
            this.OrderDetails = new ObservableCollection<OrderDetail>();
        }
    
        
    			private int _Id;
    			public int Id { 
    				get { return _Id;}
    				set { 
    					if (_Id!=value) {
    						_Id = value;
    						RaisePropertyChanged("Id");
    					}
    				}
               }
        
    			private string _Name;
    			public string Name { 
    				get { return _Name;}
    				set { 
    					if (_Name!=value) {
    						_Name = value;
    						RaisePropertyChanged("Name");
    					}
    				}
               }
        
    			private Nullable<int> _SupplierId;
    			public Nullable<int> SupplierId { 
    				get { return _SupplierId;}
    				set { 
    					if (_SupplierId!=value) {
    						_SupplierId = value;
    						RaisePropertyChanged("SupplierId");
    					}
    				}
               }
        
    			private Nullable<int> _CategoryId;
    			public Nullable<int> CategoryId { 
    				get { return _CategoryId;}
    				set { 
    					if (_CategoryId!=value) {
    						_CategoryId = value;
    						RaisePropertyChanged("CategoryId");
    					}
    				}
               }
        
    			private string _QuantityPerUnit;
    			public string QuantityPerUnit { 
    				get { return _QuantityPerUnit;}
    				set { 
    					if (_QuantityPerUnit!=value) {
    						_QuantityPerUnit = value;
    						RaisePropertyChanged("QuantityPerUnit");
    					}
    				}
               }
        
    			private Nullable<decimal> _UnitPrice;
    			public Nullable<decimal> UnitPrice { 
    				get { return _UnitPrice;}
    				set { 
    					if (_UnitPrice!=value) {
    						_UnitPrice = value;
    						RaisePropertyChanged("UnitPrice");
    					}
    				}
               }
        
    			private Nullable<short> _UnitsInStock;
    			public Nullable<short> UnitsInStock { 
    				get { return _UnitsInStock;}
    				set { 
    					if (_UnitsInStock!=value) {
    						_UnitsInStock = value;
    						RaisePropertyChanged("UnitsInStock");
    					}
    				}
               }
        
    			private Nullable<short> _UnitsOnOrder;
    			public Nullable<short> UnitsOnOrder { 
    				get { return _UnitsOnOrder;}
    				set { 
    					if (_UnitsOnOrder!=value) {
    						_UnitsOnOrder = value;
    						RaisePropertyChanged("UnitsOnOrder");
    					}
    				}
               }
        
    			private Nullable<short> _ReorderLevel;
    			public Nullable<short> ReorderLevel { 
    				get { return _ReorderLevel;}
    				set { 
    					if (_ReorderLevel!=value) {
    						_ReorderLevel = value;
    						RaisePropertyChanged("ReorderLevel");
    					}
    				}
               }
        
    			private Nullable<bool> _Discontinued;
    			public Nullable<bool> Discontinued { 
    				get { return _Discontinued;}
    				set { 
    					if (_Discontinued!=value) {
    						_Discontinued = value;
    						RaisePropertyChanged("Discontinued");
    					}
    				}
               }
        
    			private byte[] _RowTimeStamp;
    			public byte[] RowTimeStamp { 
    				get { return _RowTimeStamp;}
    				set { 
    					if (_RowTimeStamp!=value) {
    						_RowTimeStamp = value;
    						RaisePropertyChanged("RowTimeStamp");
    					}
    				}
               }
    
        
    			private Category _Category;
    			public virtual Category Category { 
    				get { return _Category;}
    				set { 
    					if (_Category!=value) {
    						_Category = value;
    						RaisePropertyChanged("Category");
    					}
    				}
               }
        
    			private ObservableCollection<OrderDetail> _OrderDetails;
    			public virtual ObservableCollection<OrderDetail> OrderDetails { 
    				get { return _OrderDetails;}
    				set { 
    					if (_OrderDetails!=value) {
    						_OrderDetails = value;
    						RaisePropertyChanged("OrderDetails");
    					}
    				}
               }
        
    			private Supplier _Supplier;
    			public virtual Supplier Supplier { 
    				get { return _Supplier;}
    				set { 
    					if (_Supplier!=value) {
    						_Supplier = value;
    						RaisePropertyChanged("Supplier");
    					}
    				}
               }
    	public event PropertyChangedEventHandler PropertyChanged;
    	protected virtual void RaisePropertyChanged(string propertyName) {
            	var handler = PropertyChanged;
    			if (handler != null) {
    	            handler(this, new PropertyChangedEventArgs(propertyName));
    			}
        }
    }
}
