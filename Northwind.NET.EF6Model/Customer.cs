//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.NET.EF6Model
{
    using System;
    using System.Collections.Generic;
    
    using System.ComponentModel;
    using System.Collections.ObjectModel;
        
    public partial class Customer: INotifyPropertyChanged
    {
        public Customer()
        {
            this.Orders = new ObservableCollection<Order>();
        }
    
        
    			private int _Id;
    			public int Id { 
    				get { return _Id;}
    				set { 
    					if (_Id!=value) {
    						_Id = value;
    						RaisePropertyChanged("Id");
    					}
    				}
               }
        
    			private string _Code;
    			public string Code { 
    				get { return _Code;}
    				set { 
    					if (_Code!=value) {
    						_Code = value;
    						RaisePropertyChanged("Code");
    					}
    				}
               }
        
    			private string _Name;
    			public string Name { 
    				get { return _Name;}
    				set { 
    					if (_Name!=value) {
    						_Name = value;
    						RaisePropertyChanged("Name");
    					}
    				}
               }
        
    			private string _ContactName;
    			public string ContactName { 
    				get { return _ContactName;}
    				set { 
    					if (_ContactName!=value) {
    						_ContactName = value;
    						RaisePropertyChanged("ContactName");
    					}
    				}
               }
        
    			private string _ContactTitle;
    			public string ContactTitle { 
    				get { return _ContactTitle;}
    				set { 
    					if (_ContactTitle!=value) {
    						_ContactTitle = value;
    						RaisePropertyChanged("ContactTitle");
    					}
    				}
               }
        
    			private string _Address;
    			public string Address { 
    				get { return _Address;}
    				set { 
    					if (_Address!=value) {
    						_Address = value;
    						RaisePropertyChanged("Address");
    					}
    				}
               }
        
    			private string _City;
    			public string City { 
    				get { return _City;}
    				set { 
    					if (_City!=value) {
    						_City = value;
    						RaisePropertyChanged("City");
    					}
    				}
               }
        
    			private string _Region;
    			public string Region { 
    				get { return _Region;}
    				set { 
    					if (_Region!=value) {
    						_Region = value;
    						RaisePropertyChanged("Region");
    					}
    				}
               }
        
    			private string _PostalCode;
    			public string PostalCode { 
    				get { return _PostalCode;}
    				set { 
    					if (_PostalCode!=value) {
    						_PostalCode = value;
    						RaisePropertyChanged("PostalCode");
    					}
    				}
               }
        
    			private string _Country;
    			public string Country { 
    				get { return _Country;}
    				set { 
    					if (_Country!=value) {
    						_Country = value;
    						RaisePropertyChanged("Country");
    					}
    				}
               }
        
    			private string _Phone;
    			public string Phone { 
    				get { return _Phone;}
    				set { 
    					if (_Phone!=value) {
    						_Phone = value;
    						RaisePropertyChanged("Phone");
    					}
    				}
               }
        
    			private string _Fax;
    			public string Fax { 
    				get { return _Fax;}
    				set { 
    					if (_Fax!=value) {
    						_Fax = value;
    						RaisePropertyChanged("Fax");
    					}
    				}
               }
        
    			private byte[] _RowTimeStamp;
    			public byte[] RowTimeStamp { 
    				get { return _RowTimeStamp;}
    				set { 
    					if (_RowTimeStamp!=value) {
    						_RowTimeStamp = value;
    						RaisePropertyChanged("RowTimeStamp");
    					}
    				}
               }
    
        
    			private ObservableCollection<Order> _Orders;
    			public virtual ObservableCollection<Order> Orders { 
    				get { return _Orders;}
    				set { 
    					if (_Orders!=value) {
    						_Orders = value;
    						RaisePropertyChanged("Orders");
    					}
    				}
               }
    	public event PropertyChangedEventHandler PropertyChanged;
    	protected virtual void RaisePropertyChanged(string propertyName) {
            	var handler = PropertyChanged;
    			if (handler != null) {
    	            handler(this, new PropertyChangedEventArgs(propertyName));
    			}
        }
    }
}
