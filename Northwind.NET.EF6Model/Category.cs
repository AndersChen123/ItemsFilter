//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.NET.EF6Model
{
    using System;
    using System.Collections.Generic;
    
    using System.ComponentModel;
    using System.Collections.ObjectModel;
        
    public partial class Category: INotifyPropertyChanged
    {
        public Category()
        {
            this.Products = new ObservableCollection<Product>();
        }
    
        
    			private int _Id;
    			public int Id { 
    				get { return _Id;}
    				set { 
    					if (_Id!=value) {
    						_Id = value;
    						RaisePropertyChanged("Id");
    					}
    				}
               }
        
    			private string _Name;
    			public string Name { 
    				get { return _Name;}
    				set { 
    					if (_Name!=value) {
    						_Name = value;
    						RaisePropertyChanged("Name");
    					}
    				}
               }
        
    			private string _Description;
    			public string Description { 
    				get { return _Description;}
    				set { 
    					if (_Description!=value) {
    						_Description = value;
    						RaisePropertyChanged("Description");
    					}
    				}
               }
        
    			private byte[] _Picture;
    			public byte[] Picture { 
    				get { return _Picture;}
    				set { 
    					if (_Picture!=value) {
    						_Picture = value;
    						RaisePropertyChanged("Picture");
    					}
    				}
               }
        
    			private byte[] _RowTimeStamp;
    			public byte[] RowTimeStamp { 
    				get { return _RowTimeStamp;}
    				set { 
    					if (_RowTimeStamp!=value) {
    						_RowTimeStamp = value;
    						RaisePropertyChanged("RowTimeStamp");
    					}
    				}
               }
    
        
    			private ObservableCollection<Product> _Products;
    			public virtual ObservableCollection<Product> Products { 
    				get { return _Products;}
    				set { 
    					if (_Products!=value) {
    						_Products = value;
    						RaisePropertyChanged("Products");
    					}
    				}
               }
    	public event PropertyChangedEventHandler PropertyChanged;
    	protected virtual void RaisePropertyChanged(string propertyName) {
            	var handler = PropertyChanged;
    			if (handler != null) {
    	            handler(this, new PropertyChangedEventArgs(propertyName));
    			}
        }
    }
}
