//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Northwind.NET.EF6Model
{
    using System;
    using System.Collections.Generic;
    
    using System.ComponentModel;
    using System.Collections.ObjectModel;
        
    public partial class Employee: INotifyPropertyChanged
    {
        public Employee()
        {
            this.Orders = new ObservableCollection<Order>();
        }
    
        
    			private int _ID;
    			public int ID { 
    				get { return _ID;}
    				set { 
    					if (_ID!=value) {
    						_ID = value;
    						RaisePropertyChanged("ID");
    					}
    				}
               }
        
    			private string _LastName;
    			public string LastName { 
    				get { return _LastName;}
    				set { 
    					if (_LastName!=value) {
    						_LastName = value;
    						RaisePropertyChanged("LastName");
    					}
    				}
               }
        
    			private string _FirstName;
    			public string FirstName { 
    				get { return _FirstName;}
    				set { 
    					if (_FirstName!=value) {
    						_FirstName = value;
    						RaisePropertyChanged("FirstName");
    					}
    				}
               }
        
    			private string _Title;
    			public string Title { 
    				get { return _Title;}
    				set { 
    					if (_Title!=value) {
    						_Title = value;
    						RaisePropertyChanged("Title");
    					}
    				}
               }
        
    			private string _TitleOfCourtesy;
    			public string TitleOfCourtesy { 
    				get { return _TitleOfCourtesy;}
    				set { 
    					if (_TitleOfCourtesy!=value) {
    						_TitleOfCourtesy = value;
    						RaisePropertyChanged("TitleOfCourtesy");
    					}
    				}
               }
        
    			private Nullable<System.DateTime> _BirthDate;
    			public Nullable<System.DateTime> BirthDate { 
    				get { return _BirthDate;}
    				set { 
    					if (_BirthDate!=value) {
    						_BirthDate = value;
    						RaisePropertyChanged("BirthDate");
    					}
    				}
               }
        
    			private Nullable<System.DateTime> _HireDate;
    			public Nullable<System.DateTime> HireDate { 
    				get { return _HireDate;}
    				set { 
    					if (_HireDate!=value) {
    						_HireDate = value;
    						RaisePropertyChanged("HireDate");
    					}
    				}
               }
        
    			private string _Address;
    			public string Address { 
    				get { return _Address;}
    				set { 
    					if (_Address!=value) {
    						_Address = value;
    						RaisePropertyChanged("Address");
    					}
    				}
               }
        
    			private string _City;
    			public string City { 
    				get { return _City;}
    				set { 
    					if (_City!=value) {
    						_City = value;
    						RaisePropertyChanged("City");
    					}
    				}
               }
        
    			private string _Region;
    			public string Region { 
    				get { return _Region;}
    				set { 
    					if (_Region!=value) {
    						_Region = value;
    						RaisePropertyChanged("Region");
    					}
    				}
               }
        
    			private string _PostalCode;
    			public string PostalCode { 
    				get { return _PostalCode;}
    				set { 
    					if (_PostalCode!=value) {
    						_PostalCode = value;
    						RaisePropertyChanged("PostalCode");
    					}
    				}
               }
        
    			private string _Country;
    			public string Country { 
    				get { return _Country;}
    				set { 
    					if (_Country!=value) {
    						_Country = value;
    						RaisePropertyChanged("Country");
    					}
    				}
               }
        
    			private string _HomePhone;
    			public string HomePhone { 
    				get { return _HomePhone;}
    				set { 
    					if (_HomePhone!=value) {
    						_HomePhone = value;
    						RaisePropertyChanged("HomePhone");
    					}
    				}
               }
        
    			private string _Extension;
    			public string Extension { 
    				get { return _Extension;}
    				set { 
    					if (_Extension!=value) {
    						_Extension = value;
    						RaisePropertyChanged("Extension");
    					}
    				}
               }
        
    			private string _Photo;
    			public string Photo { 
    				get { return _Photo;}
    				set { 
    					if (_Photo!=value) {
    						_Photo = value;
    						RaisePropertyChanged("Photo");
    					}
    				}
               }
        
    			private string _Notes;
    			public string Notes { 
    				get { return _Notes;}
    				set { 
    					if (_Notes!=value) {
    						_Notes = value;
    						RaisePropertyChanged("Notes");
    					}
    				}
               }
        
    			private Nullable<int> _ReportsTo;
    			public Nullable<int> ReportsTo { 
    				get { return _ReportsTo;}
    				set { 
    					if (_ReportsTo!=value) {
    						_ReportsTo = value;
    						RaisePropertyChanged("ReportsTo");
    					}
    				}
               }
        
    			private byte[] _RowTimeStamp;
    			public byte[] RowTimeStamp { 
    				get { return _RowTimeStamp;}
    				set { 
    					if (_RowTimeStamp!=value) {
    						_RowTimeStamp = value;
    						RaisePropertyChanged("RowTimeStamp");
    					}
    				}
               }
    
        
    			private ObservableCollection<Order> _Orders;
    			public virtual ObservableCollection<Order> Orders { 
    				get { return _Orders;}
    				set { 
    					if (_Orders!=value) {
    						_Orders = value;
    						RaisePropertyChanged("Orders");
    					}
    				}
               }
    	public event PropertyChangedEventHandler PropertyChanged;
    	protected virtual void RaisePropertyChanged(string propertyName) {
            	var handler = PropertyChanged;
    			if (handler != null) {
    	            handler(this, new PropertyChangedEventArgs(propertyName));
    			}
        }
    }
}
